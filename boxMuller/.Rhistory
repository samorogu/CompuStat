shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x<-seq(-2,4,,100)
f<-function(x){
5-(x-1)^2
}
plot(x,f(x),type="l")
abline*(h=0)
abline(v=c(-1,3))
x<-seq(-2,4,,100)
f<-function(x){
5-(x-1)^2
}
plot(x,f(x),type="l")
abline(h=0)
abline(v=c(-1,3))
else out<-5-(x-1)^2
# estimación por Monte Carlo
x<-seq(-2,4,,100)
f<-function(x){
out<-5-(x-1)^2
out<-ifelse(x<--1|x>3,o,out)
out
}
plot(x,f(x),type="l")
#abline(h=0)
#abline(v=c(-1,3))
# estimación por Monte Carlo
x<-seq(-2,4,,100)
f<-function(x){
out<-5-(x-1)^2
out<-ifelse(x<--1|x>3,0,out)
out
}
plot(x,f(x),type="l")
#abline(h=0)
#abline(v=c(-1,3))
x<-seq(-2,4,,100)
f<-function(x){
out<-5-(x-1)^2
out<-ifelse(x<-1|x>3,0,out)
out
}
plot(x,f(x),type="l")
#abline(h=0)
#abline(v=c(-1,3))
lines(x,dnorm(x,0,1), lty=2,col=2)
n<-100
x<-rnorm(n,0,1)
I1<-mean(f(x)/dnorm(x,mu,sig))
I1
mu<-0
sig<-1
n<-100
x<-rnorm(n,0,1)
I1<-mean(f(x)/dnorm(x,mu,sig))
I1
f<-function(x){
out<- 5-(x-1)^2
out<-ifelse(x<-1|x>3,0,out)
out
}
f(1)
f(2)
f<-function(x){
out<- 5-(x-1)^2
out<-ifelse(x < -1|x>3,0,out)
out
}
f(1)
lines(x,dnorm(x,0,1), lty=3,col=3)
x<-seq(-2,4,,100)
plot(x,f(x)*3/44,type="l",ylim=c(0,0.5))
#abline(h=0)
#abline(v=c(-1,3))
lines(x,dnorm(x,0,1), lty=2,col=2)
lines(x,dnorm(x,1,2/3), lty=3,col=3)
#caso1: s=normal estandar.Tiene más dispersión
mu<-0
sig<-1
n<-100
x<-rnorm(n,0,1)
I1<-mean(f(x)/dnorm(x,mu,sig))
I1
# caso2: una que este centrada en 1
mu<-1
sig<-2/3
n<-10000
x<-rnorm(n,mu,sig)
I1<-mean(f(x)/dnorm(x,mu,sig))
I1
mu<-1
sig<-3
n<-10000
x<-rnorm(n,mu,sig)
I1<-mean(f(x)/dnorm(x,mu,sig))
I1
mu<-1
sig<-3
n<-10000
x<-rnorm(n,mu,sig)
I1<-mean(f(x)/dnorm(x,mu,sig))
I1
mu<-1
sig<-3
n<-10000
x<-rnorm(n,mu,sig)
I1<-mean(f(x)/dnorm(x,mu,sig))
I1
# caso3: una que este centrada en 1 y ds 1
mu<-1
sig<-3
n<-100000
x<-rnorm(n,mu,sig)
I1<-mean(f(x)/dnorm(x,mu,sig))
I1
lines(x,dnorm(x,1,1), lty=4,col=4)
lines(x,dnorm(x,0,1), lty=2,col=2)
x<-seq(-2,4,,100)
plot(x,f(x)*3/44,type="l",ylim=c(0,0.5))
x<-rnorm(n,0,1)
plot(x,f(x)*3/44,type="l",ylim=c(0,0.5))
x<-seq(-2,4,,100)
plot(x,f(x)*3/44,type="l",ylim=c(0,0.5))
lines(x,dnorm(x,0,1), lty=2,col=2)
lines(x,dnorm(x,1,2/3), lty=3,col=3)
lines(x,dnorm(x,1,1), lty=4,col=4)
# estimación por Monte Carlo
x<-seq(-2,4,,100)
plot(x,f(x)*3/44,type="l",ylim=c(0,0.5))
#abline(h=0)
#abline(v=c(-1,3))
lines(x,dnorm(x,0,1), lty=2,col=2)
lines(x,dnorm(x,1,2/3), lty=3,col=3)
lines(x,dnorm(x,1,1), lty=4,col=4)
#caso1: s=normal estandar.Tiene más dispersión
mu<-0
sig<-1
n<-100
u<-rnorm(n,0,1)
I1<-mean(f(u)/dnorm(u,mu,sig))
I1
# caso2: una que este centrada en 1
mu<-1
sig<-2/3
n<-100000
v<-rnorm(n,mu,sig)
I1<-mean(f(v)/dnorm(v,mu,sig))
I1
# caso3: una que este centrada en 1 y ds 1
mu<-1
sig<-3
n<-100000
t<-rnorm(n,mu,sig)
I1<-mean(f(t)/dnorm(t,mu,sig))
I1
# estimación por Monte Carlo
x<-seq(-2,4,,100)
plot(x,f(x)*3/44,type="l",ylim=c(0,0.5))
#abline(h=0)
#abline(v=c(-1,3))
lines(x,dnorm(x,0,1), lty=2,col=2)
lines(x,dnorm(x,1,2/3), lty=3,col=3)
lines(x,dnorm(x,1,1), lty=4,col=4)
#caso1: s=normal estandar.Tiene más dispersión
mu<-0
sig<-1
n<-100000
u<-rnorm(n,0,1)
I1<-mean(f(u)/dnorm(u,mu,sig))
I1
# caso2: una que este centrada en 1
mu<-1
sig<-2/3
n<-100000
v<-rnorm(n,mu,sig)
I2<-mean(f(v)/dnorm(v,mu,sig))
I2
# caso3: una que este centrada en 1 y ds 1
mu<-1
sig<-3
n<-100000
t<-rnorm(n,mu,sig)
I3<-mean(f(t)/dnorm(t,mu,sig))
I3
install.packages("bayesm)
install.packages("bayesm")
install.packages("bayesm")
library(bayesm)
out<-rbinormGibbs(rho=.95)
library(bayesm)
out<-rbiNormGibbs(rho=.95)
out<-rbinormGibbs(rho=.5)
out<-rbiNormGibbs(rho=.5)
shiny::runApp()
shiny::runApp()
shiny::runApp()
